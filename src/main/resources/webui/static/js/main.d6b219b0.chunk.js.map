{"version":3,"sources":["components/actions/Link.js","resource/customers.js","resource/jobs.js","UrlBuilder.js","DataProvider.js","Config.js","components/Calendar.js","pages/CalendarPage.js","Routes.js","Menu.js","AppLayout.js","resource/orders.js","resource/invoices.js","App.js","serviceWorker.js","index.js"],"names":["Link","handleClick","console","log","_this","props","path","field","recordField","value","record","window","location","undefined","react_default","a","createElement","Button","label","this","onClick","Component","CustomersFilter","Filter","TextInput","source","CustomersList","List","Object","assign","filters","customers_CustomersFilter","Datagrid","TextField","EditButton","actions_Link","CustomerCreate","Create","customers_CreateEditForm","CustomerTitle","_ref","concat","name","CustomerEdit","Edit","title","customers_CustomerTitle","CustomerShow","Show","SimpleShowLayout","CreateEditForm","TabbedForm","FormTab","DisabledInput","SelectInput","choices","id","LongTextInput","Grid_default","container","spacing","item","md","direction","NumberInput","placeholder","DateInput","BooleanInput","JobsList","ReferenceField","reference","CreateJob","match","params","customer_id","editCreateForm","customerInput","EditJob","ReferenceInput","AutocompleteInput","optionText","defaultValue","SimpleForm","UrlBuilder","apiUrl","classCallCheck","createClass","key","resource","query","pagination","_params$pagination","page","perPage","range","JSON","stringify","sort","_params$sort","order","filter","between","DataProvider","httpClient","arguments","length","fetchUtils","fetchJson","type","UPDATE_MANY","Promise","all","ids","map","method","body","data","then","responses","response","json","DELETE_MANY","_convertDataRequestTo","url","options","urlBuilder","GET_LIST","buildUrl","GET_ONE","GET_MANY","GET_MANY_REFERENCE","objectSpread","defineProperty","target","UPDATE","CREATE","DELETE","Error","convertDataRequestToHTTP","headers","has","total","parseInt","get","split","pop","convertHTTPResponse","Config","Calendar","_React$Component","_getPrototypeOf2","_len","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","dataProvider","getDataProvider","items","inherits","cal","$","refs","calendar","fullCalendar","events","getEvents","bind","displayEventEnd","header","left","center","right","ref","startDate","endDate","timezone","callback","_this2","serviceDate","unix","result","arrangeEvents","i","push","start","Date","job","customer","doneBy","React","CalendarPage","Card_default","Title","CardContent_default","Calendar_Calendar","Routes","react_router_dom_es","exact","component","render","routeProps","jobs_CreateJob","withRouter","connect","state","resources","getResources","onMenuClick","logout","hasList","MenuItemLink","to","primaryText","charAt","toUpperCase","slice","leftIcon","List_default","Event_default","Responsive","small","medium","AppLayout","Layout","menu","Menu","OrdersList","InvoicesList","DateField","App","Admin","appLayout","customRoutes","Resource","list","edit","create","show","Boolean","hostname","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d6b219b0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-admin';\nimport { showNotification } from 'react-admin';\nimport { push } from 'react-router-redux';\n\nclass Link extends Component {\n    handleClick = () => {\n        console.log(this.props)\n        var path = this.props.path;\n        var field = this.props.recordField;\n        var value = this.props.record[field]\n        console.log(value)\n        if(value != undefined) {\n            window.location = \"#\"+path+\"/\"+value\n            return;\n        }\n        window.location = \"#\"+path\n\n    }\n\n    render() {\n        return <Button label={this.props.label} onClick={this.handleClick} />;\n    }\n}\n\nLink.propTypes = {\n    label: PropTypes.string,\n    path: PropTypes.string,\n    recordField: PropTypes.string\n};\n\nexport default Link;\n","import React from 'react';\nimport { Filter, Button, List, Edit, Show, SimpleShowLayout, DisabledInput, EditButton, Datagrid, DateInput, NumberInput, SelectInput, TextField, Create, TextInput, LongTextInput, TabbedForm, FormTab, BooleanInput, TabbedShowLayout, Tab } from 'react-admin';\nimport Grid from '@material-ui/core/Grid';\nimport Link from '../components/actions/Link'\n\nconst CustomersFilter = (props) => (\n    <Filter {...props}>\n        <TextInput source=\"name\" />\n    </Filter>\n);\n\nexport const CustomersList = (props) => {\n    return (\n        <List {...props} filters={<CustomersFilter />}>\n            <Datagrid>\n                <TextField source=\"id\" />\n                <TextField source=\"name\" />\n                <TextField source=\"location\" />\n                <EditButton />\n                <Link label=\"Create Job\" path=\"/jobs/customer/create\" recordField=\"id\"/> \n            </Datagrid>\n        </List>\n    )\n}\n\nexport const CustomerCreate = (props) => (\n    <Create {...props}>\n        <CreateEditForm />\n    </Create>\n);\nconst CustomerTitle = ({ record }) => {\n    return <span>Post {record ? `\"${record.name}\"` : ''}</span>;\n};\nexport const CustomerEdit = (props) => (\n    <Edit title={<CustomerTitle/>} {...props}>\n        <CreateEditForm />\n    </Edit>\n);\n\nexport const CustomerShow = (props) => (\n    <Show {...props}>\n        <SimpleShowLayout>\n            <TextField source=\"name\" />\n        </SimpleShowLayout>\n    </Show>\n)\n\nconst CreateEditForm = (props) =>  {\n    return (\n    <TabbedForm {...props}>\n        <FormTab label=\"General\">\n            <DisabledInput source=\"id\" />\n            <TextInput source=\"name\" />\n            <TextInput source=\"location\" />\n            <TextInput source=\"area\" />\n            <SelectInput source=\"type\" choices={[\n                { id: 'C', name: 'C' },\n                { id: 'N', name: 'N' },\n                { id: 'R', name: 'R' },\n            ]} />\n\n            <SelectInput source=\"company\" choices={[\n                { id: 'S', name: 'S' },\n                { id: 'I', name: 'I' },\n            ]} />\n            <LongTextInput source=\"notes\" />\n        </FormTab>\n        <FormTab label=\"Contacts\">\n            <Grid container spacing={24}>\n                <Grid item md={6}>\n                    <Grid container direction=\"column\">\n                        <h2>Location Information</h2>\n                        <TextInput source=\"contact\" />\n                        <TextInput source=\"addressLine1\" />\n                        <TextInput source=\"addressLine2\" />\n                        <TextInput source=\"city\" />\n                        <TextInput source=\"state\" />\n                        <TextInput source=\"zip\" />\n                        <TextInput source=\"phone\" />\n                        <TextInput source=\"fax\" />\n                    </Grid>\n                </Grid>\n                <Grid item md={6}>\n                    <Grid container direction=\"column\">\n                        <h2>Billing Information</h2>\n                        <TextInput source=\"contactB\" />\n                        <TextInput source=\"addressLine1B\" />\n                        <TextInput source=\"addressLine2B\" />\n                        <TextInput source=\"cityB\" />\n                        <TextInput source=\"stateB\" />\n                        <TextInput source=\"zipB\" />\n                        <TextInput source=\"phoneB\" />\n                        <TextInput source=\"faxB\" />\n                    </Grid>\n                </Grid>\n            </Grid>\n        </FormTab>\n        <FormTab label=\"Accounting\">\n            <TextInput source=\"obtainedBy\"/>\n            <TextInput source=\"royaltyTo\"/>\n            <NumberInput source=\"monthlyBill\" placeholder=\"0.0\" />\n            <NumberInput source=\"billCharge\" placeholder=\"0.0\"/>\n            <NumberInput source=\"deposit\" placeholder=\"0.0\"/>\n            <NumberInput source=\"salesTax\" placeholder=\"0.0\"/>\n        </FormTab>\n        <FormTab label=\"Settings\">\n            <DateInput source=\"obtainedDate\" />\n            <BooleanInput source=\"active\" />\n            <DateInput source=\"inactiveDate\" />\n            <BooleanInput source=\"fourWeekInvoice\" />\n            <BooleanInput source=\"calendarMonthInvoice\" />\n            <BooleanInput source=\"quarterlyInvoice\" />\n            <BooleanInput source=\"AWWPUR\" />\n            <BooleanInput source=\"AWWLine\" />\n        </FormTab>\n    </TabbedForm>\n)\n}","import React from 'react';\nimport { List, Edit, DateField, ReferenceField, EditButton, Datagrid, DateInput, NumberInput, SelectInput, \n    TextField, Create, TextInput, LongTextInput, TabbedForm, FormTab, BooleanInput, \n    TabbedShowLayout, DateTimeInput, Tab, DisabledInput, SimpleForm, ReferenceInput, AutocompleteInput } from 'react-admin';\nimport Grid from '@material-ui/core/Grid';\n\nexport const JobsList = (props) => (\n    <List {...props}>\n        <Datagrid>\n            <TextField source=\"id\" />\n            <ReferenceField label=\"Customer\" source=\"customer.id\" reference=\"customers\">\n                <TextField source=\"name\" />\n            </ReferenceField>\n            <EditButton />\n        </Datagrid>\n    </List>\n)\n\n\n\nexport const CreateJob = (props) => {\n    console.log(props.match.params.customer_id)\n    return (\n        <Create title=\"Create Job\" {...props}>\n         {editCreateForm(customerInput(props.match.params.customer_id))}\n        </Create>\n    )\n\n}\n\nexport const EditJob = (props) => (\n    <Edit title=\"Edit Job\" {...props}>\n        {editCreateForm(customerInput(props.match.params.customer_id))}\n    </Edit>\n)\n\nconst customerInput = (id) => {\n    var customerInput = (\n                <ReferenceInput label=\"Customer\" source=\"customer.id\" reference=\"customers/filter/name\">\n                    <AutocompleteInput optionText=\"name\" defaultValue=\"Tim\"/>\n                </ReferenceInput>\n    )\n    if(id != undefined) {\n        customerInput = <DisabledInput defaultValue={id} source=\"customer.id\" />\n    }\n    return customerInput\n}\nconst editCreateForm = (customerInput) => (\n    <SimpleForm>\n        <DisabledInput source=\"id\" />\n        {customerInput}\n        <NumberInput source=\"amount\" />\n        <NumberInput source=\"daysBetween\" />\n        <NumberInput source=\"percent\" />\n        <BooleanInput source=\"printServiceStatement\" />\n        <BooleanInput source=\"printInvoice\" />\n        <BooleanInput source=\"paymentExpected\" />\n        <BooleanInput source=\"autoPrintServiceStatement\" />\n        <NumberInput source=\"difficulty\" />\n        <LongTextInput source=\"description\" />\n        <LongTextInput source=\"notes\" />\n    </SimpleForm>\n)","import { stringify } from 'query-string';\n\nexport class UrlBuilder {\n    apiUrl = \"\"\n    constructor(apiUrl) {\n        this.apiUrl = apiUrl;\n    }\n    buildUrl(resource, params) {\n        let query = {}\n        if(params.pagination != null) {\n            const { page, perPage } = params.pagination;\n            query.range = JSON.stringify([\n                (page - 1) * perPage,\n                page * perPage - 1,\n            ])\n        }\n        if(params.sort != undefined){\n            const { field, order } = params.sort;\n            query.sort = JSON.stringify([field, order])\n        }\n        if(params.filter != undefined){\n            query.filter = JSON.stringify(params.filter)\n        }\n        if(params.between != undefined) {\n            query.between = JSON.stringify(params.between)\n        }\n\n            \n        return `${this.apiUrl}/${resource}?${stringify(query)}`;\n    }\n}","import { stringify } from 'query-string';\nimport {\n    fetchUtils,\n    GET_LIST,\n    GET_ONE,\n    GET_MANY,\n    GET_MANY_REFERENCE,\n    CREATE,\n    UPDATE,\n    UPDATE_MANY,\n    DELETE,\n    DELETE_MANY,\n} from 'react-admin';\nimport {\n    GET\n} from './RequestTypes'\nimport { UrlBuilder } from './UrlBuilder';\n/**\n * Maps react-admin queries to a simple REST API\n *\n * The REST dialect is similar to the one of FakeRest\n * @see https://github.com/marmelab/FakeRest\n * @example\n * GET_LIST     => GET http://my.api.url/posts?sort=['title','ASC']&range=[0, 24]\n * GET_ONE      => GET http://my.api.url/posts/123\n * GET_MANY     => GET http://my.api.url/posts?filter={ids:[123,456,789]}\n * UPDATE       => PUT http://my.api.url/posts/123\n * CREATE       => POST http://my.api.url/posts\n * DELETE       => DELETE http://my.api.url/posts/123\n */\nexport default (apiUrl, httpClient = fetchUtils.fetchJson) => {\n    /**\n     * @param {String} type One of the constants appearing at the top if this file, e.g. 'UPDATE'\n     * @param {String} resource Name of the resource to fetch, e.g. 'posts'\n     * @param {Object} params The data request params, depending on the type\n     * @returns {Object} { url, options } The HTTP request parameters\n     */\n    const convertDataRequestToHTTP = (type, resource, params) => {\n        let url = '';\n        const options = {};\n        let urlBuilder = new UrlBuilder(apiUrl);\n        switch (type) {\n            case GET_LIST: {\n                url = urlBuilder.buildUrl(resource, params);\n                break;\n            }\n            case GET_ONE:\n                url = `${apiUrl}/${resource}/${params.id}`;\n                break;\n            case GET_MANY: {\n                const query = {\n                    filter: JSON.stringify({ id: params.ids }),\n                };\n                url = `${apiUrl}/${resource}?${stringify(query)}`;\n                break;\n            }\n            case GET_MANY_REFERENCE: {\n                const { page, perPage } = params.pagination;\n                const { field, order } = params.sort;\n                const query = {\n                    sort: JSON.stringify([field, order]),\n                    range: JSON.stringify([\n                        (page - 1) * perPage,\n                        page * perPage - 1,\n                    ]),\n                    filter: JSON.stringify({\n                        ...params.filter,\n                        [params.target]: params.id,\n                    }),\n                };\n                url = `${apiUrl}/${resource}?${stringify(query)}`;\n                break;\n            }\n            case UPDATE:\n                url = `${apiUrl}/${resource}/${params.id}`;\n                options.method = 'PUT';\n                options.body = JSON.stringify(params.data);\n                break;\n            case CREATE:\n                url = `${apiUrl}/${resource}`;\n                options.method = 'POST';\n                options.body = JSON.stringify(params.data);\n                break;\n            case DELETE:\n                url = `${apiUrl}/${resource}/${params.id}`;\n                options.method = 'DELETE';\n                break;\n            default:\n                throw new Error(`Unsupported fetch action type ${type}`);\n        }\n        return { url, options };\n    };\n\n    /**\n     * @param {Object} response HTTP response from fetch()\n     * @param {String} type One of the constants appearing at the top if this file, e.g. 'UPDATE'\n     * @param {String} resource Name of the resource to fetch, e.g. 'posts'\n     * @param {Object} params The data request params, depending on the type\n     * @returns {Object} Data response\n     */\n    const convertHTTPResponse = (response, type, resource, params) => {\n        const { headers, json } = response;\n        switch (type) {\n            case GET_LIST:\n            case GET_MANY_REFERENCE:\n                if (!headers.has('content-range')) {\n                    throw new Error(\n                        'The Content-Range header is missing in the HTTP Response. The simple REST data provider expects responses for lists of resources to contain this header with the total number of results to build the pagination. If you are using CORS, did you declare Content-Range in the Access-Control-Expose-Headers header?'\n                    );\n                }\n                return {\n                    data: json,\n                    total: parseInt(\n                        headers\n                            .get('content-range')\n                            .split('/')\n                            .pop(),\n                        10\n                    ),\n                };\n            case CREATE:\n                return { data: { ...params.data, id: json.id } };\n            default:\n                return { data: json };\n        }\n    };\n\n    /**\n     * @param {string} type Request type, e.g GET_LIST\n     * @param {string} resource Resource name, e.g. \"posts\"\n     * @param {Object} payload Request parameters. Depends on the request type\n     * @returns {Promise} the Promise for a data response\n     */\n    return (type, resource, params) => {\n        // simple-rest doesn't handle filters on UPDATE route, so we fallback to calling UPDATE n times instead\n        if (type === UPDATE_MANY) {\n            return Promise.all(\n                params.ids.map(id =>\n                    httpClient(`${apiUrl}/${resource}/${id}`, {\n                        method: 'PUT',\n                        body: JSON.stringify(params.data),\n                    })\n                )\n            ).then(responses => ({\n                data: responses.map(response => response.json),\n            }));\n        }\n        // simple-rest doesn't handle filters on DELETE route, so we fallback to calling DELETE n times instead\n        if (type === DELETE_MANY) {\n            return Promise.all(\n                params.ids.map(id =>\n                    httpClient(`${apiUrl}/${resource}/${id}`, {\n                        method: 'DELETE',\n                    })\n                )\n            ).then(responses => ({\n                data: responses.map(response => response.json),\n            }));\n        }\n\n        const { url, options } = convertDataRequestToHTTP(\n            type,\n            resource,\n            params\n        );\n        return httpClient(url, options).then(response =>\n            convertHTTPResponse(response, type, resource, params)\n        );\n    };\n};","import DataProvider from './DataProvider'\n\nexport class Config {\n    static getDataProvider() {\n        return DataProvider('http://localhost:8080')\n    }\n}","import React from 'react';\nimport { Config } from '../Config';\nimport { GET_LIST } from 'react-admin';\nimport $ from 'jquery'; \nimport 'moment/min/moment.min.js';\n\nimport 'fullcalendar/dist/fullcalendar.css';\nimport 'fullcalendar/dist/fullcalendar.js';\n\nexport class Calendar extends React.Component {\n    dataProvider = Config.getDataProvider();\n    cal;\n    items = [];\n    componentDidMount() {\n        this.cal = $(this.refs.calendar).fullCalendar({\n            events: this.getEvents.bind(this),\n            displayEventEnd: false,\n            header: {\n                left: 'prev,next today',\n                center: 'title',\n                right: 'month,agendaWeek,agendaDay,listWeek'\n              }\n        })\n    }\n    render() {\n      return <div ref=\"calendar\"></div>;\n    }\n\n    getEvents(startDate, endDate, timezone, callback) {\n\n        this.dataProvider(GET_LIST, 'calendar', {\n            between: {\n                serviceDate: [startDate.unix()*1000,endDate.unix()*1000]\n            }\n        }).then((data) => {\n            let result = this.arrangeEvents(data.data)\n            callback(result)\n        })\n    }\n\n    arrangeEvents(data) {\n        let result = [];\n        for(var i = 0; i < data.length; i++ ){\n            let item = data[i];\n            result.push({\n                start: new Date(item.serviceDate),\n                title: \"\\nCustomer: \"+item.job.customer.name+\"\\nTech: \"+item.doneBy\n            })\n        }\n        return result\n    }\n\n\n\n}","import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { Title } from 'react-admin';\nimport { Calendar } from '../components/Calendar';\n\nconst CalendarPage = () => (\n    <Card>\n        <Title title=\"Calendar\" />\n        <CardContent>\n            <Calendar />\n        </CardContent>\n    </Card>\n);\n\nexport default CalendarPage;","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport CalendarPage from './pages/CalendarPage';\nimport { CreateJob } from './resource/jobs';\n\nexport default [\n    <Route exact path=\"/calendar\" component={CalendarPage} />,\n    <Route exact path=\"/jobs/customer/create/:customer_id\" render={(routeProps) => {\n        return<CreateJob resource=\"jobs\" {...routeProps} />\n    }} />\n]","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { MenuItemLink, getResources, Responsive } from 'react-admin';\r\nimport Icon from '@material-ui/icons/List';\r\nimport EventIcon from '@material-ui/icons/Event';\r\nimport { withRouter } from 'react-router-dom';\r\n//import Responsive from '../layout/Responsive';\r\n\r\nconst Menu = ({ resources, onMenuClick, logout }) => (\r\n    <div>\r\n        {resources.map(resource => {\r\n            if(resource.hasList) {\r\n                return (\r\n                    <MenuItemLink to={`/`+resource.name} \r\n                    primaryText={`${resource.name.charAt(0).toUpperCase() + resource.name.slice(1)}`} leftIcon={<Icon />} onClick={onMenuClick} />\r\n                )\r\n            }\r\n        }\r\n        )}\r\n        <MenuItemLink to=\"/Calendar\" primaryText=\"Calendar\" leftIcon={<EventIcon />} onClick={onMenuClick} />\r\n        <Responsive\r\n            small={logout}\r\n            medium={null} // Pass null to render nothing on larger devices\r\n        />\r\n    </div>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n    resources: getResources(state),\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps)(Menu));\r\n","import React from 'react'\r\nimport { Layout } from 'react-admin';\r\nimport Menu from './Menu';\r\n\r\nconst AppLayout = props => <Layout\r\n    {...props}\r\n    menu={Menu}\r\n/>;\r\n\r\nexport default AppLayout;","import React from 'react';\nimport { List, Edit, DateField, ReferenceField, EditButton, Datagrid, DateInput, NumberInput, SelectInput, \n    TextField, Create, TextInput, LongTextInput, TabbedForm, FormTab, BooleanInput, \n    TabbedShowLayout, DateTimeInput, Tab, DisabledInput, SimpleForm, ReferenceInput, AutocompleteInput } from 'react-admin';\n    \nexport const OrdersList = (props) => (\n    <List {...props}>\n        <Datagrid>\n            <TextField source=\"id\" />\n            <TextField source=\"status\" />\n            <ReferenceField label=\"Customer\" source=\"job.id\" reference=\"jobs\">\n                <ReferenceField source=\"customer.id\" reference=\"customers\">\n                    <TextField source=\"name\" />\n                </ReferenceField>\n            </ReferenceField>\n            <EditButton />\n        </Datagrid>\n    </List>\n)","import React from 'react';\nimport { List, Edit, DateField, ReferenceField, EditButton, Datagrid, DateInput, NumberInput, SelectInput, \n    TextField, Create, TextInput, LongTextInput, TabbedForm, FormTab, BooleanInput, \n    TabbedShowLayout, DateTimeInput, Tab, DisabledInput, SimpleForm, ReferenceInput, AutocompleteInput } from 'react-admin';\n    \nexport const InvoicesList = (props) => (\n    <List {...props}>\n        <Datagrid>\n            <TextField source=\"id\" />\n            <DateField source=\"dateInvoiced\" />\n            <ReferenceField label=\"Customer\" source=\"order.id\" reference=\"orders\">\n                <ReferenceField source=\"job.id\" reference=\"jobs\">\n                    <ReferenceField source=\"customer.id\" reference=\"customers\">\n                        <TextField source=\"name\" />\n                    </ReferenceField>\n                </ReferenceField>\n            </ReferenceField>\n            <EditButton />\n        </Datagrid>\n    </List>\n)","import React from 'react';\nimport { Admin, Resource } from 'react-admin';\nimport { CustomersList, CustomerCreate, CustomerEdit, CustomerShow } from './resource/customers'\nimport { JobsList, EditJob, CreateJob } from './resource/jobs'\nimport Routes from './Routes';\nimport { Config } from './Config';\nimport AppLayout from './AppLayout';\nimport { OrdersList } from './resource/orders';\nimport { InvoicesList } from './resource/invoices';\nconst dataProvider = new Config.getDataProvider()\n\nconst App = () => (\n  <Admin appLayout={AppLayout} customRoutes={Routes} dataProvider={dataProvider}>\n    <Resource name=\"customers\" list={CustomersList} edit={CustomerEdit} create={CustomerCreate} show={CustomerShow} />\n    <Resource name=\"jobs\" list={JobsList} create={CreateJob} edit={EditJob}  />\n    <Resource name=\"orders\" list={OrdersList}  />\n    <Resource name=\"invoices\" list={InvoicesList}  />\n\n    <Resource name=\"customers/filter/name\" />\n    <Resource name=\"calendar\" />\n  </Admin>\n)\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}