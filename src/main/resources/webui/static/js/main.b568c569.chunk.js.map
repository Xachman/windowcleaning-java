{"version":3,"sources":["resource/customers.js","App.js","serviceWorker.js","index.js"],"names":["CustomersList","props","react_default","a","createElement","List","Datagrid","TextField","source","EditButton","CustomerCreate","Create","TabbedForm","FormTab","label","TextInput","SelectInput","choices","id","name","LongTextInput","Grid_default","container","spacing","item","md","direction","NumberInput","placeholder","DateInput","BooleanInput","CustomerTitle","_ref","record","concat","CustomerEdit","Edit","Object","assign","title","customers_CustomerTitle","DisabledInput","dataProvider","simpleRestProvider","App","Admin","Resource","list","edit","create","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b568c569.chunk.js","sourcesContent":["import React from 'react';\nimport { List, Edit, DisabledInput, EditButton, Datagrid, DateInput, NumberInput, SelectInput, TextField, Create, TextInput, LongTextInput, TabbedForm, FormTab, BooleanInput, TabbedShowLayout, Tab } from 'react-admin';\nimport Grid from '@material-ui/core/Grid';\nexport const CustomersList = (props) => (\n    <List {...props}>\n        <Datagrid>\n            <TextField source=\"id\" />\n            <TextField source=\"name\" />\n            <TextField source=\"location\" />\n            <EditButton />\n        </Datagrid>\n    </List>\n);\n\nexport const CustomerCreate = (props) => (\n    <Create {...props}>\n        <TabbedForm>\n            <FormTab label=\"General\">\n                <TextInput source=\"name\" />\n                <TextInput source=\"location\" />\n                <TextInput source=\"area\" />\n                <SelectInput source=\"type\" choices={[\n                    { id: 'C', name: 'C' },\n                    { id: 'N', name: 'N' },\n                    { id: 'R', name: 'R' },\n                ]} />\n\n                <SelectInput source=\"company\" choices={[\n                    { id: 'S', name: 'S' },\n                    { id: 'I', name: 'I' },\n                ]} />\n                <LongTextInput source=\"notes\" />\n            </FormTab>\n            <FormTab label=\"Contacts\">\n                <Grid container spacing={24}>\n                    <Grid item md={6}>\n                        <Grid container direction=\"column\">\n                            <h2>Location Information</h2>\n                            <TextInput source=\"contact\" />\n                            <TextInput source=\"addressLine1\" />\n                            <TextInput source=\"addressLine2\" />\n                            <TextInput source=\"city\" />\n                            <TextInput source=\"state\" />\n                            <TextInput source=\"zip\" />\n                            <TextInput source=\"phone\" />\n                            <TextInput source=\"fax\" />\n                        </Grid>\n                    </Grid>\n                    <Grid item md={6}>\n                        <Grid container direction=\"column\">\n                            <h2>Billing Information</h2>\n                            <TextInput source=\"contactB\" />\n                            <TextInput source=\"addressLine1B\" />\n                            <TextInput source=\"addressLine2B\" />\n                            <TextInput source=\"cityB\" />\n                            <TextInput source=\"stateB\" />\n                            <TextInput source=\"zipB\" />\n                            <TextInput source=\"phoneB\" />\n                            <TextInput source=\"faxB\" />\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </FormTab>\n            <FormTab label=\"Accounting\">\n                <TextInput source=\"obtainedBy\"/>\n                <TextInput source=\"royaltyTo\"/>\n                <NumberInput source=\"monthlyBill\" placeholder=\"0.0\" />\n                <NumberInput source=\"billCharge\" placeholder=\"0.0\"/>\n                <NumberInput source=\"deposit\" placeholder=\"0.0\"/>\n                <NumberInput source=\"salesTax\" placeholder=\"0.0\"/>\n            </FormTab>\n            <FormTab label=\"Settings\">\n                <DateInput source=\"customerSince\" />\n                <BooleanInput source=\"active\" />\n                <DateInput source=\"inactiveSince\" />\n                <BooleanInput source=\"fourWeekInvoice\" />\n                <BooleanInput source=\"calendarMonthInvoice\" />\n                <BooleanInput source=\"quarterlyInvoice\" />\n                <BooleanInput source=\"AWWPUR\" />\n                <BooleanInput source=\"AWWLine\" />\n            </FormTab>\n        </TabbedForm>\n    </Create>\n);\nconst CustomerTitle = ({ record }) => {\n    return <span>Post {record ? `\"${record.name}\"` : ''}</span>;\n};\nexport const CustomerEdit = (props) => (\n    <Edit title={<CustomerTitle/>} {...props}>\n        <TabbedForm>\n            <FormTab label=\"General\">\n                <DisabledInput source=\"id\" />\n                <TextInput source=\"name\" />\n                <TextInput source=\"location\" />\n                <TextInput source=\"area\" />\n                <SelectInput source=\"type\" choices={[\n                    { id: 'C', name: 'C' },\n                    { id: 'N', name: 'N' },\n                    { id: 'R', name: 'R' },\n                ]} />\n\n                <SelectInput source=\"company\" choices={[\n                    { id: 'S', name: 'S' },\n                    { id: 'I', name: 'I' },\n                ]} />\n                <LongTextInput source=\"notes\" />\n            </FormTab>\n            <FormTab label=\"Contacts\">\n                <h2>Location Information</h2>\n                <TextInput source=\"contact\" />\n                <TextInput source=\"addressLine1\" />\n                <TextInput source=\"addressLine2\" />\n                <TextInput source=\"city\" />\n                <TextInput source=\"state\" />\n                <TextInput source=\"zip\" />\n                <TextInput source=\"phone\" />\n                <TextInput source=\"fax\" />\n                <h2>Billing Information</h2>\n                <TextInput source=\"contactB\" />\n                <TextInput source=\"addressLine1B\" />\n                <TextInput source=\"addressLine2B\" />\n                <TextInput source=\"cityB\" />\n                <TextInput source=\"stateB\" />\n                <TextInput source=\"zipB\" />\n                <TextInput source=\"phoneB\" />\n                <TextInput source=\"faxB\" />\n            </FormTab>\n            <FormTab label=\"Accounting\">\n                <TextInput source=\"obtainedBy\"/>\n                <TextInput source=\"royaltyTo\"/>\n                <NumberInput source=\"monthlyBill\" placeholder=\"0.0\" />\n                <NumberInput source=\"billCharge\" placeholder=\"0.0\"/>\n                <NumberInput source=\"deposit\" placeholder=\"0.0\"/>\n                <NumberInput source=\"salesTax\" placeholder=\"0.0\"/>\n            </FormTab>\n            <FormTab label=\"Settings\">\n                <DateInput source=\"customerSince\" />\n                <BooleanInput source=\"active\" />\n                <DateInput source=\"inactiveSince\" />\n                <BooleanInput source=\"fourWeekInvoice\" />\n                <BooleanInput source=\"calendarMonthInvoice\" />\n                <BooleanInput source=\"quarterlyInvoice\" />\n                <BooleanInput source=\"AWWPUR\" />\n                <BooleanInput source=\"AWWLine\" />\n            </FormTab>\n        </TabbedForm>\n    </Edit>\n);","import React from 'react';\nimport { Admin, Resource } from 'react-admin';\nimport simpleRestProvider from 'ra-data-simple-rest';\nimport { CustomersList, CustomerCreate, CustomerEdit } from './resource/customers'\nconst dataProvider = simpleRestProvider('http://localhost:8080');\nconst App = () => (\n  <Admin dataProvider={dataProvider}>\n    <Resource name=\"customers\" list={CustomersList} edit={CustomerEdit} create={CustomerCreate}  />\n  </Admin>\n)\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}